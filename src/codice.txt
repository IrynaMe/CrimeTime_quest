    @Override
    public void goAssistant(LocalTime timeStart) {
        //limit questions at a time: 2, then wait 2 min
        //ask questions only 2 or more min after the last question
        Duration pauseTalk = Duration.ZERO;
        pauseTalk = Duration.between(personaggi.get("detective").getTimeAskedAssistant(), timeStart);
        long minutesPause = pauseTalk.toMinutes();
        if (minutesPause < BREAKTIME && assistantQuestions.length > 0) {
            System.out.println();
            System.out.println("*** It seems that " + personaggi.get("assistant").getName() + " is still busy, come back later. ***");
            menu();
        }

        String choiceStr = "";
        int choice = -1;
        System.out.println();

        //reset questions counter if 2 or more minutes passed after reaching the limit for questions
        if (personaggi.get("detective").isAskedAssistant()) {
            countQuestionsAssistant = 1;
            personaggi.get("detective").setAskedAssistant(false);
        }

        while (countQuestionsAssistant < 3 && personaggi.get("detective").isAskedAssistant() == false) {
            if (assistantQuestions.length > 0) {
                int index = 1;
                System.out.println();

                //if the method is recalled 2 or more min after the last question
                System.out.println();
                System.out.println("--------------------------------------------");
                System.out.println("*** You came to visit " + personaggi.get("assistant").getName() + " ***");

                System.out.println("*** Which questions would you like to ask? ***");
                //print the list of questions
                for (String element : assistantQuestions) {
                    System.out.println((index++) + " -> " + element);
                }

                //control if choice is valid
                boolean flag;
                boolean isDigit=false;
                do {
                    System.out.println();
                    System.out.println("*** Input your choice  ***");
                    System.out.println("1 - " + (assistantQuestions.length) + " -> Ask the question");
                    System.out.println("0 -> Go back to the menu");
                    choiceStr = scanner.next();
                    for (char c : choiceStr.toCharArray()) {
                        if (!Character.isDigit(c)) {
                            isDigit = false;
                            break;
                        } else {
                            isDigit = true;
                        }
                    }
                    if (isDigit) {
                        choice = Integer.parseInt(choiceStr) - 1;
                    }
                    flag = (isDigit && (choice <= sisterQuestions.length - 1 || choice == 0));
                    if (!flag) {
                        System.out.println("Input error, try again");
                    }
                } while (!flag);

                //detective asks a question
                if (choice != -1) {
                    if (choice == 5) {
                        personaggi.get("detective").setCanMeetGrandmother(true);
                    }
                    //print the chosen question and the answer
                    String givenAnswer = assistantAnswers[choice];
                    System.out.println();
                    System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
                    System.out.println(personaggi.get("detective").getName() + ": " + assistantQuestions[choice]);
                    System.out.println(givenAnswer);
                    System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");

                    //count questions
                    countQuestionsAssistant++;

                    //put the answer to the ArrayList-> to use in seeNotes();
                    answersReceived.add(givenAnswer);
                    //set boolean for assistant to take action after all the questions from the array are asked
                    if (assistantQuestions.length == 1) {
                        personaggi.get("detective").setActionAssistant(true);
                    }

                    //delete the used question and answer from the arrays;
                    for (int i = choice; i < assistantQuestions.length - 1; i++) {
                        assistantQuestions[i] = assistantQuestions[i + 1];
                    }
                    assistantQuestions = Arrays.copyOf(assistantQuestions, assistantQuestions.length - 1);
                    for (int i = choice; i < assistantAnswers.length - 1; i++) {
                        assistantAnswers[i] = assistantAnswers[i + 1];
                    }
                    assistantAnswers = Arrays.copyOf(assistantAnswers, assistantAnswers.length - 1);
                } else {
                    menu();
                }
            } else if (personaggi.get("detective").isActionAssistant()) {
                //assistant takes action when all the questions from the array are asked
                System.out.println();
                System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
                System.out.println(personaggi.get("assistant").getName() + ": " + conversations.getHurryUpAssistant()[4]);
                System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                System.out.println();
                conversations.clueAssistant(personaggi);
                personaggi.get("detective").setActionAssistant(false);
                System.out.println("*** Here is the code, that " + personaggi.get("assistant").getName() + "gave you: ***");
                String codeAssistant = puzzles.getCodeAssistant();
                System.out.println();
                System.out.println(codeAssistant);
                System.out.println();

                if (personaggi.get("detective").isCodeFromAssistant() == false) {
                    personaggi.get("detective").setCodeFromAssistant(true);
                    if (personaggi.get("detective").isCodeFromSister() == false) {
                        System.out.println("*** You put the code in the bag to keep as evidence ***");
                        evidence.add(codeAssistant);
                    } else {
                        System.out.println("*** Now you have both parts of the instruction! ***");
                        System.out.println("*** When you are ready to solve the puzzle, choose this option in the menu. ***");
                        String completeCode = puzzles.getCompleteCode();
                        evidence.add(completeCode);
                    }
                }


            } else {
                //if there are no more questions in the array
                System.out.println();
                // System.out.println("*** " + personaggi.get("assistant").getName() + ": has no more valuable information to share. ***");
                //detective should unlock the garage
                System.out.println("You should unlock the garage and understand what assistant wanted to take there");
                // System.out.println("*** You should find evidence that incriminates " +personaggi.get("assistant").getName()+ " ***");
                menu();
            }
        }
        //when detective reached the limit for questions
        if (countQuestionsAssistant >= 3) {
            personaggi.get("detective").setAskedAssistant(true);
            //registrate the time when limit for questions was reached
            personaggi.get("detective").setTimeAskedAssistant(LocalTime.now());
            int numReasonHurry = (int) (Math.random() * 4);//to take index 0-3 of the array hurryUpAssistant
            System.out.println();
            System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
            System.out.println(personaggi.get("assistant").getName() + ": " + conversations.getHurryUpAssistant()[numReasonHurry]);
            System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            menu();
        }

        menu();
    }